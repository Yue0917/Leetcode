# BFS
# res is equals to the most left treenode's value in each level.

class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int res = 0;
        while(!q.isEmpty()){
            int size = q.size();
            res = q.peek().val;
            for(int i = 0; i < size; i ++){
                TreeNode cur = q.poll();
                if(cur.left != null) q.add(cur.left);
                if(cur.right != null) q.add(cur.right);
            }
        }
        return res;
    }
}


# DFS
# a global variable level to memorize the level of tree and use res to store the most left treenode if the level is the same.

class Solution {
    
    int res = 0;
    int level = -1;
    
    public int findBottomLeftValue(TreeNode root) {    
        dfs(root, 0);
        return res;
    }
    public void dfs(TreeNode node, int level){
        if(node == null) return;
        if(level > this.level){
            this.level = level;
            this.res = node.val;
        }
        dfs(node.left, level+1);
        dfs(node.right, level+1);
    }
}
